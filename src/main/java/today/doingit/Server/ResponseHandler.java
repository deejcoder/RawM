package today.doingit.Server;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonParser;
import today.doingit.App.User;

/**
 * ResponseHandler will handle all outgoing messages.
 * These outgoing messages are passed on from the RequestHandler.
 * This message will be in JSON, and will have the scope of
 * users or user, that it should be sent to.
 *
 * It is only focused on who it should be sent to!
 */
public class ResponseHandler {
    /*
        Requests will have the following format,
        {
            "type":"responseType",
            "address":"ScopeOfUsers",
            "message":"message"
        }
     */

    /**
     * Sends a response generated by the RequestHandler, to the specified audience.
     * @param server the server object for performing Server function calls
     * @param user the User who sent the request
     * @param response the JSON response that is to be sent.
     * @return true if the message has been sent to the audience, or otherwise false.
     */
    public static boolean handleResponse(Server server, User user, String response) {


        //Find out who to send the response to...
        try {
            JsonParser parser = new JsonParser();
            JsonElement rootNode = parser.parse(response);

            if (rootNode.isJsonObject()) {
                JsonObject json = rootNode.getAsJsonObject();
                String type = json.get("type").getAsString();

                //What type of response is it?
                switch (type) {
                    case "broadcast": {
                        SendBroadcastMessage(server, user, response);
                        break;
                    }
                    case "client":
                    case "error": { //TODO: Change error to sub-type
                        SendClientMessage(server, user, response);
                        break;
                    }
                    case "user": {
                        SendClientMessage(server, user, response);
                        break;
                    }

                }
            }
        }
        catch(JsonParseException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    /**
     * Sends a message to all clients
     * @param server the server to send the message from
     * @param message the message
     * @return
     */
    public static boolean SendBroadcastMessage(Server server, String message) {
        for(User user : server.getClientList()) {
            server.send(user, message);
        }
        return true;
    }

    /**
     * Sends a message to all clients, except the sender
     * @param server the server to send the message from
     * @param sender the sender
     * @param message the message
     * @return
     */
    public static boolean SendBroadcastMessage(Server server, User sender, String message) {
        for(User user: server.getClientList()) {
            if(user == sender) {
                continue;
            }
            server.send(user, message);
        }
        return true;
    }

    /**
     * Sends a message to a particular user.
     * @param server the server to send the message from
     * @param user the user to send the message to
     * @param message the message to send
     * @return
     */
    public static boolean SendClientMessage(Server server,  User user, String message) {
        return server.send(user, message);
    }

}
