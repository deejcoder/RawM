package today.doingit.Server;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.nio.channels.SocketChannel;

/**
 * ResponseHandler will handle all outgoing messages.
 * These outgoing messages are passed on from the RequestHandler.
 * This message will be in JSON, and will have the scope of
 * users or user, that it should be sent to.
 *
 * It is only focused on who it should be sent to!
 */
public class ResponseHandler {
    /*
        Requests will have the following format,
        {
            "type":"responseType",
            "address":"ScopeOfUsers",
            "message":"message"
        }
     */

    /**
     * Sends a response generated by the RequestHandler, to the specified audience.
     * @param server the server object for performing Server function calls
     * @param response the JSON response that is to be sent.
     * @return true if the message has been sent to the audience, or otherwise false.
     */
    public static boolean handleResponse(Server server, String response) {

        //Find out who to send the response to...
        JsonParser parser = new JsonParser();
        JsonElement rootNode = parser.parse(response);

        if(rootNode.isJsonObject()) {
            JsonObject json = rootNode.getAsJsonObject();
            JsonElement address = json.get("type");

            switch(address.getAsString()) {
                case "broadcast": {
                    SendBroadcastMessage(server, response);
                }
            }
        }
        return false;
    }

    //TODO: Force-send message to non-sending clients
    public static boolean SendBroadcastMessage(Server server, String response) {
        for(SocketChannel user : server.getClientList().values()) {
            server.push(user, response);
        }

        return false;
    }
}
