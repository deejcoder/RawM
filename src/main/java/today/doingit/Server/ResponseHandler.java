package today.doingit.Server;

import com.google.gson.*;
import today.doingit.App.User;


final class BasicResponseType {
    String type;
    String body;
}

final class ComplexResponseType <T> {
    String type;
    T body;
}

/**
 * ResponseHandler will handle all outgoing messages.
 * These outgoing messages are passed on from the RequestHandler.
 * This message will be in JSON, and will have the scope of
 * users or user, that it should be sent to.
 *
 * It is only focused on who it should be sent to!
 */
public class ResponseHandler {

    public enum R_TYPE {
        BROADCAST,
        USER
    }

    /**
     * Creates a basic response with type & body in the JSON
     * @param server the server to send the response from
     * @param user the user who sent the initial request
     * @param audience who should it be sent to?
     * @param type the type of request
     * @param body the body of the request
     */
    public static void BasicResponse(Server server, User user, R_TYPE audience, String type, String body) {
        BasicResponseType response = new BasicResponseType();
        response.type = type;
        response.body = body;
        String responseString = buildResponse(response);
        Response(server, user, audience, responseString);
    }

    /**
     * Creates a complex response, similar to BasicResponse except allows JSON in the body.
     * @param server the server to send the response from.
     * @param user the user who sent the initial request
     * @param audience who should the response be sent to?
     * @param type the type of request
     * @param body the body of the request
     */
    public static void ComplexResponse(Server server, User user, R_TYPE audience, String type, String body) {
        ComplexResponseType response = new ComplexResponseType();
        response.type = type;
        try {
            response.body = new Gson().fromJson(body, JsonObject.class);
        }
        catch(JsonSyntaxException ex) {
            response.body = new Gson().fromJson(body, JsonArray.class);
        }
        String responseString = buildResponse(response);
        Response(server, user, audience, responseString);
    }

    /**
     * Uses GSON to build a response string.
     * @param response the object.
     * @return a JSON string.
     */
    private static String buildResponse(Object response) {
        GsonBuilder builder = new GsonBuilder();
        Gson gson = builder.create();
        String responseString = gson.toJson(response);
        return responseString;
    }

    /**
     * Sends an error back to a client.
     * @param server the server to send the error from
     * @param user the client
     * @param body the body of the error
     */
    public static void BasicError(Server server, User user, String body) {
        BasicResponse(server, user, R_TYPE.USER, "error", body);
    }

    /**
     * Sends a response generated by the RequestHandler, to the specified audience.
     * @param server the server object for performing Server function calls
     * @param user the User who sent the request
     * @param response the JSON response that is to be sent.
     * @return true if the message has been sent to the audience, or otherwise false.
     */
    public static boolean Response(Server server, User user, R_TYPE type, String response) {

        //What type of response is it?
        switch (type) {
            case BROADCAST: {
                SendBroadcastMessage(server, user, response);
                break;
            }
            case USER: {
                SendClientMessage(server, user, response);
                break;
            }

        }
        System.out.println(response);
        return false;
    }

    /**
     * Sends a message to all clients
     * @param server the server to send the message from
     * @param message the message
     * @return
     */
    public static boolean SendBroadcastMessage(Server server, String message) {
        for(User user : server.getClientList()) {
            server.send(user, message);
        }
        return true;
    }

    /**
     * Sends a message to all clients, except the sender
     * @param server the server to send the message from
     * @param sender the sender
     * @param message the message
     * @return
     */
    public static boolean SendBroadcastMessage(Server server, User sender, String message) {
        System.out.println("BROADCAST: " + message);
        for(User user: server.getClientList()) {
            if(user == sender || user == null) {
                continue;
            }
            server.send(user, message);
        }
        return true;
    }

    /**
     * Sends a message to a particular user.
     * @param server the server to send the message from
     * @param user the user to send the message to
     * @param message the message to send
     * @return
     */
    public static boolean SendClientMessage(Server server,  User user, String message) {
        if(user == null) return false;
        return server.send(user, message);
    }

}
